# Generated by Django 5.0.1 on 2024-05-14 05:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Log_in',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vaccines',
            fields=[
                ('vaccine_id', models.AutoField(primary_key=True, serialize=False)),
                ('vaccine_name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('client_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('postal_code', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to='client/images/')),
                ('log_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.log_in')),
            ],
        ),
        migrations.CreateModel(
            name='Pets',
            fields=[
                ('pet_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('species', models.CharField(max_length=100)),
                ('race', models.CharField(max_length=100)),
                ('birth_date', models.DateField(max_length=99)),
                ('gender', models.BooleanField()),
                ('allergies', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to='pet/images/')),
                ('tipo_sangre', models.CharField(max_length=50, null=True)),
                ('client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.client')),
            ],
        ),
        migrations.CreateModel(
            name='Medical_history',
            fields=[
                ('Medical_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('pet_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.pets')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('appointment_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('reason_appointment', models.CharField(max_length=200, null=True)),
                ('rating', models.IntegerField(null=True)),
                ('comment', models.CharField(max_length=50, null=True)),
                ('appointment_accepted', models.BooleanField(default=False)),
                ('pet_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.pets')),
            ],
        ),
        migrations.CreateModel(
            name='Phone_Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=15)),
                ('client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.client')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('test_findings', models.CharField(max_length=200, null=True)),
                ('diagnosis', models.CharField(max_length=200, null=True)),
                ('prescribed_treatment', models.CharField(max_length=200, null=True)),
                ('recommendations', models.CharField(max_length=200, null=True)),
                ('additional_note', models.CharField(max_length=200, null=True)),
                ('update_note', models.CharField(max_length=100)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('appointement_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.appointment')),
                ('medical_history_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.medical_history')),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='medical/file/')),
                ('report_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.report')),
            ],
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('vaccination_id', models.AutoField(primary_key=True, serialize=False)),
                ('vaccine_date', models.DateField(null=True)),
                ('medical_history_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.medical_history')),
                ('vaccine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.vaccines')),
            ],
        ),
        migrations.CreateModel(
            name='Vet',
            fields=[
                ('vet_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('postal_code', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=15)),
                ('average_score', models.IntegerField()),
                ('image', models.ImageField(null=True, upload_to='user/images/')),
                ('address', models.CharField(max_length=100, null=True)),
                ('log_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.log_in')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='vet_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Client_User.vet'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('username', models.CharField(max_length=255, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Username')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
